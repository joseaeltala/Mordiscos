---
# proxmox_create_lxc: creation of a complete LXC container in Proxmox cluster
# tasks file for ansible-role-proxmox-create-lxc/

# Extraer el hostname del inventory_hostname (debe ser el fqdn)
- name: Extract hostname from inventory_hostname (must be fqdn)
  set_fact:
    proxmox_hostname: "{{ inventory_hostname.split('.')[0] }}"
  tags:
    - deploy
    - borrar

# Verificar si python-pip está instalado en el nodo proxmox
- name: Verify that python-pip is installed in the Proxmox node
  apt:
    name: python-pip
    state: present
  delegate_to: "{{ api_host }}"

#  Verificar si el módulo proxmoxer de python está instalado
- name: Verify if proxmoxer pip module is installed
  pip:
    name: proxmoxer
    state: present
  delegate_to: "{{ api_host }}"

## Descargar la plantilla del contenedor
    #- name: Download the container template
    #  get_url:
    #    url: "{{ url_ostemplate }}"
    #    dest: /var/lib/vz/template/cache/
    #  delegate_to: "{{ api_host }}"
    #  register: descarga_ostemplate
    #  tags:
    #    - descarga
    #    - download
    #
    ## Agregar template lxc del container al nodo
    #- name: Add LXC container template to node
    #  proxmox_template:
    #      node: "{{ node }}"
    #      api_user: "{{ api_user }}"
    #      api_host: "{{ api_host }}"
    #      api_password: "{{ node_deploy_password }}"
    #      src: "{{ descarga_ostemplate.dest }}" ##
    #      content_type: vztmpl
    #      state: present
    #  delegate_to: "{{ api_host }}"
    #  tags:
    #      - descarga
    #      - download
    #
# Creando el container
- name: Create the container
  proxmox:
    node: "{{ node }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{ node_deploy_password }}"
    hostname: "{{ proxmox_hostname }}"
    ostemplate: "{{ almacenamiento }}:vztmpl/{{ template }}"
    password: "{{ root_password }}"
    pubkey: "{{ lookup('file','~/.auth/id_rsa.pub') }}"
    cores: "{{ cores }}"
    cpus: "{{ cpu_limit | default(omit) }}"
    cpuunits: "{{ cpu_units | default(omit) }}"
    memory: "{{ memory }}"
    swap: "{{ swap | default(512) }}"
    storage: "{{ storage }}"
    disk: "{{ disk }}"
    mounts: >-
      {   {%- for item in mounts -%}
            "{{ item.id }}":"{{ item.storage|default('local-lvm') }}:{{ item.size|default(32) }},mp={{ item.mount_point|default('/mnt/mp0') }},{% if item.acl is defined %}{% if (item.acl) %}acl=1{% else %}acl=0{% endif %},{% endif %}{% if item.quota is defined and item.quota %}quota=1,{% endif %}{% if item.read_only is defined and item.read_only %}ro=1,{% endif %}{% if item.backup is defined and item.backup %}backup=1,{% endif %}{% if item.skip_replication is defined and item.skip_replication %}replicate=0{% endif %}",
          {%- endfor -%}  }
    netif: >-
      {   {%- for item in net_interfaces -%}
            "{{ item.id }}":"name={{ item.name }},bridge={{ item.bridge }},{% if (item.hwaddr is defined) %}hwaddr={{ item.hwaddr }},{% endif %}{% if (item.ip4 is defined) %}ip={{ item.ip4 }}/{{ item.netmask4 }},{% endif %}{% if (item.gw4 is defined) %}gw={{ item.gw4 }},{% endif %}{% if (item.ip6 is defined) %}ip6={{ item.ip6 }}/{{ item.netmask6 }},{% endif %}{% if (item.gw6 is defined) %}gw6={{ item.gw6 }},{% endif %}{% if (item.firewall is defined and item.firewall) %}firewall=1,{% endif %}{% if (item.rate_limit is defined) %}rate={{ item.rate_limit }},{% endif %}{% if (item.vlan_tag is defined) %}tag={{ item.vlan_tag }}{% endif %}",
          {%- endfor -%}  }
    nameserver: "{{ nameserver }}"
    onboot: "{{ onboot | default(omit) }}"
    unprivileged: "{{ unprivileged | default(omit) }}"
    timeout: "{{ proxmox_create_lxc_timeout | default(omit) }}"
    pool: "{{ pool }}"
    vmid: "{{ idlxc }}"
  delegate_to: "{{ api_host }}"
  register: container

# Extraer el número de VM
- name: Extract the ID of the VM from container var
  shell: |
    set -o pipefail
    pct list | grep -w "{{ proxmox_hostname }}" | cut -f 1 -d ' '
  args:
    executable: /bin/bash
  delegate_to: "{{ api_host }}"
  register: VMID
  #when: container is succeeded
  changed_when: false
  tags:
    - deploy
    - borrar

- name: Additional configurations
  shell: echo '{{ item }}' >> /etc/pve/nodes/{{ node }}/lxc/{{ VMID.stdout }}.conf
  with_items: "{{ pve_additional_conf }}"
  when: (pve_additional_conf is defined) and (container.changed | bool)
  delegate_to: "{{ api_host }}"
  tags:
    - deploy

  #Se habilita la opcion nesting para los hosts en grupo nodos.
- name: Habilitar la opcion nesting a los hosts en grupo nodos
  shell: "pvesh set /nodes/{{ node }}/lxc/{{ VMID.stdout }}/config --features nesting=1,mount=nfs" #Esto nos permite que el contenedor tenga a su vez otros contenedores.
  args:
          executable: /bin/bash
  delegate_to: "{{ api_host }}"
  when: "'docker-cluster' in group_names"

  #Se habilita la opcion NFS para todos los hosts.
- name: Habilitar la opcion nfs a todos los hosts
  shell: "pvesh set /nodes/{{ node }}/lxc/{{ VMID.stdout }}/config --features mount=nfs" #Esto nos permite que el contenedor pueda montar particiones por nfs.
  args:
          executable: /bin/bash
  delegate_to: "{{ api_host }}"
  when: "'docker-cluster' not in group_names"
  tags:
    - deploy

  # Cambiar estado del contenedor
- name: Cambiar estado del contenedor
  proxmox:
    node: "{{ node }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{ node_deploy_password }}"
    vmid: "{{ VMID.stdout }}"
    state: "{{ estado }}"
  delegate_to: "{{ api_host }}"
  tags:
    - deploy
    - borrar
    - estado
